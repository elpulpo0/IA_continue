from prefect import flow, task
from prefect.logging import get_run_logger
import os
import time
import requests
from dotenv import load_dotenv
from webhook_disord import send_discord_embed

load_dotenv()

# Configuration
PYTHONIOENCODING = os.getenv("PYTHONIOENCODING", "utf-8")
PREFECT_API_URL = os.getenv("PREFECT_API_URL", "http://127.0.0.1:4200/api")
FASTAPI_URL = os.getenv("FASTAPI_URL", "http://localhost:8000")


def send_discord(message: str, status: str = "Succ√®s", title: str = None):
    """Fonction utilitaire pour envoyer un message Discord avec titre et couleur adapt√©s."""
    colors = {
        "Succ√®s": 0x2ECC71,  # vert
        "Erreur": 0xE74C3C,  # rouge
        "Warning": 0xF1C40F,  # jaune
        "Info": 3447003,  # bleu par d√©faut
    }
    if title is None:
        if status == "Succ√®s":
            title = "‚úÖ Succ√®s"
        elif status == "Erreur":
            title = "‚ùå Erreur"
        elif status == "Warning":
            title = "‚ö†Ô∏è Avertissement"
        else:
            title = "‚ÑπÔ∏è Information"

    color = colors.get(status, colors["Info"])

    send_discord_embed(message=message, title=title, status=status, color=color)


@task(retries=3, retry_delay_seconds=5, name="Pr√©voir avec le mod√®le")
def predict():
    logger = get_run_logger()
    try:
        response = requests.get(f"{FASTAPI_URL}/predict", timeout=5)
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©seau pendant la pr√©diction : {e}")
        send_discord(
            f"Erreur r√©seau pendant la pr√©diction : {e}",
            status="Erreur",
            title="‚ùå Erreur de pr√©diction",
        )
        raise

    # Si la r√©ponse est 400, on consid√®re qu'il n'y a pas assez de donn√©es / mod√®le
    if response.status_code == 400:
        data = response.json()
        logger.warning(f"‚ö†Ô∏è 400 Bad Request: {data.get('error')}")
        send_discord(
            f"Pr√©diction impossible : {data.get('error')}",
            status="Warning",
            title="‚ö†Ô∏è Pr√©diction impossible",
        )
        return None

    # Pour tout autre code d‚Äôerreur HTTP >= 401, on l√®ve pour d√©clencher le retry
    if response.status_code >= 401:
        logger.error(f"‚ùå Erreur HTTP {response.status_code} pendant la pr√©diction.")
        send_discord(
            f"Erreur HTTP {response.status_code} pendant la pr√©diction.",
            status="Erreur",
            title="‚ùå Erreur HTTP Pr√©diction",
        )
        response.raise_for_status()

    # Enfin, cas 200 OK
    result = response.json()
    prediction = result.get("prediction")
    logger.info(f"‚úÖ Pr√©diction : {prediction}")
    send_discord(
        f"Pr√©diction r√©ussie : {prediction}",
        status="Succ√®s",
        title="üéØ Pr√©diction effectu√©e",
    )
    return prediction


@task(name="G√©n√©rer le dataset")
def generate():
    logger = get_run_logger()
    try:
        response = requests.post(f"{FASTAPI_URL}/generate", timeout=5)
        response.raise_for_status()
        logger.info("üì¶ Dataset g√©n√©r√© avec succ√®s.")
        send_discord(
            "Nouveau jeu de donn√©es g√©n√©r√© avec succ√®s.",
            status="Succ√®s",
            title="üß¨ Nouveau jeu de donn√©es",
        )
    except Exception as e:
        logger.error(f"Erreur lors de la g√©n√©ration du dataset : {e}")
        send_discord(
            f"Erreur lors de la g√©n√©ration du dataset : {e}",
            status="Erreur",
            title="üö® Erreur g√©n√©ration dataset",
        )
        raise e


@task(name="R√©entra√Æner le mod√®le")
def retrain():
    logger = get_run_logger()
    try:
        response = requests.post(f"{FASTAPI_URL}/retrain", timeout=10)
        response.raise_for_status()
        logger.info("üîÅ Mod√®le r√©entra√Æn√© avec succ√®s.")
        send_discord(
            "Le mod√®le a √©t√© r√©entra√Æn√© avec succ√®s.",
            status="Succ√®s",
            title="üîÅ R√©entra√Ænement du mod√®le",
        )
    except Exception as e:
        logger.error(f"Erreur lors du r√©entra√Ænement : {e}")
        send_discord(
            f"Erreur lors du r√©entra√Ænement : {e}",
            status="Erreur",
            title="üö® √âchec d'entra√Ænement",
        )
        raise e


@flow(name="Surveillance mod√®le ML")
def periodic_check():
    logger = get_run_logger()
    logger.info("‚è≥ V√©rification du mod√®le en cours...")

    try:
        prediction = predict()
    except Exception:
        logger.warning(
            "üí• √âchec total de la pr√©diction apr√®s retries. Tentative de r√©entra√Ænement..."
        )
        send_discord(
            "√âchec total de la pr√©diction apr√®s retries. Tentative de r√©entra√Ænement...",
            status="Erreur",
            title="üí• √âchec de pr√©diction",
        )
        generate()
        time.sleep(1)
        retrain()
        return

    if prediction is None:
        logger.warning(
            "‚ö†Ô∏è Aucune donn√©e disponible pour la pr√©diction. G√©n√©ration et r√©entra√Ænement n√©cessaires."
        )
        send_discord(
            "Aucune donn√©e disponible pour la pr√©diction. G√©n√©ration et r√©entra√Ænement n√©cessaires.",
            status="Warning",
            title="‚ö†Ô∏è Donn√©es manquantes",
        )
        generate()
        time.sleep(1)
        retrain()
    elif prediction == 0:
        logger.warning("‚ö†Ô∏è Mauvaise pr√©diction. R√©entra√Ænement n√©cessaire.")
        send_discord(
            "‚ö†Ô∏è Mauvaise pr√©diction d√©tect√©e. R√©entra√Ænement n√©cessaire.",
            status="Warning",
            title="‚ö†Ô∏è R√©entra√Ænement n√©cessaire",
        )
        generate()
        time.sleep(1)
        retrain()
    else:
        logger.info("‚úÖ Le mod√®le fonctionne correctement.")
        send_discord(
            "Le mod√®le fonctionne correctement.",
            status="Succ√®s",
            title="‚úÖ Mod√®le stable",
        )


if __name__ == "__main__":
    while True:
        periodic_check.with_options(flow_run_name="Surveillance")()
        time.sleep(10)
